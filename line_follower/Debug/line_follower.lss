
line_follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000cf0  00000d84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080010c  0080010c  00000d90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fed  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a1  00000000  00000000  00001ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095c  00000000  00000000  00002866  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  000031c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000514  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000906  00000000  00000000  00003894  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000419a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cf 02 	call	0x59e	; 0x59e <main>
  9e:	0c 94 76 06 	jmp	0xcec	; 0xcec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#include "adc.h"

//Function To Initialize the ADC Module
void adc_init()
{
	ADMUX=(1<<REFS0);	// For Aref=AVcc;
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <read_adc>:
*/
uint16_t read_adc(uint8_t ch)
{
	
	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
  b4:	87 70       	andi	r24, 0x07	; 7
	ADMUX&=0b11100000;
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	90 7e       	andi	r25, 0xE0	; 224
  be:	90 83       	st	Z, r25
	ADMUX|=ch;
  c0:	90 81       	ld	r25, Z
  c2:	89 2b       	or	r24, r25
  c4:	80 83       	st	Z, r24
	
	//10-bit result left justified (ADCH bit9-2, ADCL bit1-0)
	ADMUX |= 1<<ADLAR;
  c6:	80 81       	ld	r24, Z
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	80 83       	st	Z, r24

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
	
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  d6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  da:	84 ff       	sbrs	r24, 4
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <read_adc+0x22>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 61       	ori	r24, 0x10	; 16
  e6:	80 83       	st	Z, r24

	uint8_t LowPart = ADCL;	//10-bit resolution
  e8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	uint16_t TenBitResult = ADCH << 2 | LowPart >> 6; //10-bit resolution
  ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	22 95       	swap	r18
  fc:	26 95       	lsr	r18
  fe:	26 95       	lsr	r18
 100:	23 70       	andi	r18, 0x03	; 3

	return(TenBitResult);
 102:	82 2b       	or	r24, r18
 104:	08 95       	ret

00000106 <read_sensors>:
#include "adc.h"
#include "irsensors.h"
#include "leds.h"

float read_sensors()
{
 106:	4f 92       	push	r4
 108:	5f 92       	push	r5
 10a:	6f 92       	push	r6
 10c:	7f 92       	push	r7
 10e:	9f 92       	push	r9
 110:	af 92       	push	r10
 112:	bf 92       	push	r11
 114:	cf 92       	push	r12
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
	uint16_t	eleft,left,lmiddle,rmiddle,right,eright; //6 IR sensors arrangement
	uint8_t		sensor6,sensor5, sensor4, sensor3,sensor2,sensor1;
	
	float avgSensor = 0.0;
	
	eright=read_adc(SENSOR1);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_adc>
	if(eright>SENSOR_THRES)//Right black line sensor
 12a:	8f 3e       	cpi	r24, 0xEF	; 239
 12c:	92 40       	sbci	r25, 0x02	; 2
 12e:	30 f0       	brcs	.+12     	; 0x13c <read_sensors+0x36>
	{
		sensor1 = 1;
		ledon(1);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 09 02 	call	0x412	; 0x412 <ledon>
	float avgSensor = 0.0;
	
	eright=read_adc(SENSOR1);
	if(eright>SENSOR_THRES)//Right black line sensor
	{
		sensor1 = 1;
 136:	99 24       	eor	r9, r9
 138:	93 94       	inc	r9
 13a:	04 c0       	rjmp	.+8      	; 0x144 <read_sensors+0x3e>
		ledon(1);
	}
	else
	{
		sensor1 = 0;
		ledoff(1);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 27 02 	call	0x44e	; 0x44e <ledoff>
		sensor1 = 1;
		ledon(1);
	}
	else
	{
		sensor1 = 0;
 142:	91 2c       	mov	r9, r1
		ledoff(1);
	}
	right=read_adc(SENSOR2);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_adc>
	if(right>SENSOR_THRES)//Right black line sensor
 14a:	8f 3e       	cpi	r24, 0xEF	; 239
 14c:	92 40       	sbci	r25, 0x02	; 2
 14e:	28 f0       	brcs	.+10     	; 0x15a <read_sensors+0x54>
	{
		sensor2 = 1;
		ledon(2);
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	0e 94 09 02 	call	0x412	; 0x412 <ledon>
		ledoff(1);
	}
	right=read_adc(SENSOR2);
	if(right>SENSOR_THRES)//Right black line sensor
	{
		sensor2 = 1;
 156:	c1 e0       	ldi	r28, 0x01	; 1
 158:	04 c0       	rjmp	.+8      	; 0x162 <read_sensors+0x5c>
		ledon(2);
	}
	else
	{
		sensor2 = 0;
		ledoff(2);
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	0e 94 27 02 	call	0x44e	; 0x44e <ledoff>
		sensor2 = 1;
		ledon(2);
	}
	else
	{
		sensor2 = 0;
 160:	c0 e0       	ldi	r28, 0x00	; 0
		ledoff(2);
	}
	rmiddle=read_adc(SENSOR3);
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_adc>
	if(rmiddle>SENSOR_THRES)//Middle black line sensor
 168:	8f 3e       	cpi	r24, 0xEF	; 239
 16a:	92 40       	sbci	r25, 0x02	; 2
 16c:	28 f0       	brcs	.+10     	; 0x178 <read_sensors+0x72>
	{
		sensor3 = 1;
		ledon(3);
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	0e 94 09 02 	call	0x412	; 0x412 <ledon>
		ledoff(2);
	}
	rmiddle=read_adc(SENSOR3);
	if(rmiddle>SENSOR_THRES)//Middle black line sensor
	{
		sensor3 = 1;
 174:	01 e0       	ldi	r16, 0x01	; 1
 176:	04 c0       	rjmp	.+8      	; 0x180 <read_sensors+0x7a>
		ledon(3);
	}
	else
	{
		sensor3 = 0;
		ledoff(3);
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	0e 94 27 02 	call	0x44e	; 0x44e <ledoff>
		sensor3 = 1;
		ledon(3);
	}
	else
	{
		sensor3 = 0;
 17e:	00 e0       	ldi	r16, 0x00	; 0
		ledoff(3);
	}
	lmiddle=read_adc(SENSOR4);
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_adc>
	if(lmiddle>SENSOR_THRES)// Middle black line sensor
 186:	8f 3e       	cpi	r24, 0xEF	; 239
 188:	92 40       	sbci	r25, 0x02	; 2
 18a:	30 f0       	brcs	.+12     	; 0x198 <read_sensors+0x92>
	{
		sensor4 = 1;
		ledon(4);
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	0e 94 09 02 	call	0x412	; 0x412 <ledon>
		ledoff(3);
	}
	lmiddle=read_adc(SENSOR4);
	if(lmiddle>SENSOR_THRES)// Middle black line sensor
	{
		sensor4 = 1;
 192:	aa 24       	eor	r10, r10
 194:	a3 94       	inc	r10
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <read_sensors+0x9a>
		ledon(4);
	}
	else
	{
		sensor4 = 0;
		ledoff(4);
 198:	84 e0       	ldi	r24, 0x04	; 4
 19a:	0e 94 27 02 	call	0x44e	; 0x44e <ledoff>
		sensor4 = 1;
		ledon(4);
	}
	else
	{
		sensor4 = 0;
 19e:	a1 2c       	mov	r10, r1
		ledoff(4);
	}
	left=read_adc(SENSOR5);
 1a0:	84 e0       	ldi	r24, 0x04	; 4
 1a2:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_adc>
	if(left>=SENSOR_THRES)// Left black line sensor
 1a6:	8e 3e       	cpi	r24, 0xEE	; 238
 1a8:	92 40       	sbci	r25, 0x02	; 2
 1aa:	30 f0       	brcs	.+12     	; 0x1b8 <read_sensors+0xb2>
	{
		sensor5 = 1;
		ledon(5);
 1ac:	85 e0       	ldi	r24, 0x05	; 5
 1ae:	0e 94 09 02 	call	0x412	; 0x412 <ledon>
		ledoff(4);
	}
	left=read_adc(SENSOR5);
	if(left>=SENSOR_THRES)// Left black line sensor
	{
		sensor5 = 1;
 1b2:	ee 24       	eor	r14, r14
 1b4:	e3 94       	inc	r14
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <read_sensors+0xba>
		ledon(5);
	}
	else
	{
		sensor5 = 0;
		ledoff(5);
 1b8:	85 e0       	ldi	r24, 0x05	; 5
 1ba:	0e 94 27 02 	call	0x44e	; 0x44e <ledoff>
		sensor5 = 1;
		ledon(5);
	}
	else
	{
		sensor5 = 0;
 1be:	e1 2c       	mov	r14, r1
		ledoff(5);
	}

	eleft=read_adc(SENSOR6); // LED1
 1c0:	85 e0       	ldi	r24, 0x05	; 5
 1c2:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_adc>
	if(eleft>=SENSOR_THRES)// Left black line sensor
 1c6:	8e 3e       	cpi	r24, 0xEE	; 238
 1c8:	92 40       	sbci	r25, 0x02	; 2
 1ca:	30 f0       	brcs	.+12     	; 0x1d8 <read_sensors+0xd2>
	{
		sensor6 = 1;
		ledon(6);
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	0e 94 09 02 	call	0x412	; 0x412 <ledon>
	}

	eleft=read_adc(SENSOR6); // LED1
	if(eleft>=SENSOR_THRES)// Left black line sensor
	{
		sensor6 = 1;
 1d2:	cc 24       	eor	r12, r12
 1d4:	c3 94       	inc	r12
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <read_sensors+0xda>
		ledon(6);
	}
	else
	{
		sensor6 = 0;
		ledoff(6);
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	0e 94 27 02 	call	0x44e	; 0x44e <ledoff>
		sensor6 = 1;
		ledon(6);
	}
	else
	{
		sensor6 = 0;
 1de:	c1 2c       	mov	r12, r1
		ledoff(6);
	}

	if(sensor1==0 && sensor2==0 && sensor3==0 && sensor4==0 && sensor5==0 && sensor6==0)
 1e0:	91 10       	cpse	r9, r1
 1e2:	0b c0       	rjmp	.+22     	; 0x1fa <read_sensors+0xf4>
 1e4:	c1 11       	cpse	r28, r1
 1e6:	09 c0       	rjmp	.+18     	; 0x1fa <read_sensors+0xf4>
 1e8:	01 11       	cpse	r16, r1
 1ea:	07 c0       	rjmp	.+14     	; 0x1fa <read_sensors+0xf4>
 1ec:	a1 10       	cpse	r10, r1
 1ee:	05 c0       	rjmp	.+10     	; 0x1fa <read_sensors+0xf4>
 1f0:	e1 10       	cpse	r14, r1
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <read_sensors+0xf4>
 1f4:	cc 20       	and	r12, r12
 1f6:	09 f4       	brne	.+2      	; 0x1fa <read_sensors+0xf4>
 1f8:	83 c0       	rjmp	.+262    	; 0x300 <read_sensors+0x1fa>
	{
		return 0xFF;
	}
	
	// Calculate weighted mean
	avgSensor = (float) sensor1*1 + sensor2*2 + sensor3*3 + sensor4*4 + sensor5*5 + sensor6*6;
 1fa:	69 2d       	mov	r22, r9
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__floatunsisf>
 206:	2b 01       	movw	r4, r22
 208:	3c 01       	movw	r6, r24
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	be 01       	movw	r22, r28
 20e:	66 0f       	add	r22, r22
 210:	77 1f       	adc	r23, r23
 212:	07 2e       	mov	r0, r23
 214:	00 0c       	add	r0, r0
 216:	88 0b       	sbc	r24, r24
 218:	99 0b       	sbc	r25, r25
 21a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__floatsisf>
 21e:	a3 01       	movw	r20, r6
 220:	92 01       	movw	r18, r4
 222:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
 226:	2b 01       	movw	r4, r22
 228:	3c 01       	movw	r6, r24
 22a:	10 e0       	ldi	r17, 0x00	; 0
 22c:	b8 01       	movw	r22, r16
 22e:	66 0f       	add	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	60 0f       	add	r22, r16
 234:	71 1f       	adc	r23, r17
 236:	07 2e       	mov	r0, r23
 238:	00 0c       	add	r0, r0
 23a:	88 0b       	sbc	r24, r24
 23c:	99 0b       	sbc	r25, r25
 23e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__floatsisf>
 242:	a3 01       	movw	r20, r6
 244:	92 01       	movw	r18, r4
 246:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
 24a:	2b 01       	movw	r4, r22
 24c:	3c 01       	movw	r6, r24
 24e:	b1 2c       	mov	r11, r1
 250:	b5 01       	movw	r22, r10
 252:	66 0f       	add	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	07 2e       	mov	r0, r23
 25c:	00 0c       	add	r0, r0
 25e:	88 0b       	sbc	r24, r24
 260:	99 0b       	sbc	r25, r25
 262:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__floatsisf>
 266:	a3 01       	movw	r20, r6
 268:	92 01       	movw	r18, r4
 26a:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
 26e:	2b 01       	movw	r4, r22
 270:	3c 01       	movw	r6, r24
 272:	f1 2c       	mov	r15, r1
 274:	b7 01       	movw	r22, r14
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	66 0f       	add	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	6e 0d       	add	r22, r14
 280:	7f 1d       	adc	r23, r15
 282:	07 2e       	mov	r0, r23
 284:	00 0c       	add	r0, r0
 286:	88 0b       	sbc	r24, r24
 288:	99 0b       	sbc	r25, r25
 28a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__floatsisf>
 28e:	a3 01       	movw	r20, r6
 290:	92 01       	movw	r18, r4
 292:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
 296:	2b 01       	movw	r4, r22
 298:	3c 01       	movw	r6, r24
 29a:	d1 2c       	mov	r13, r1
 29c:	b6 01       	movw	r22, r12
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	6c 0d       	add	r22, r12
 2a4:	7d 1d       	adc	r23, r13
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	07 2e       	mov	r0, r23
 2ac:	00 0c       	add	r0, r0
 2ae:	88 0b       	sbc	r24, r24
 2b0:	99 0b       	sbc	r25, r25
 2b2:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__floatsisf>
 2b6:	9b 01       	movw	r18, r22
 2b8:	ac 01       	movw	r20, r24
 2ba:	c3 01       	movw	r24, r6
 2bc:	b2 01       	movw	r22, r4
 2be:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
 2c2:	2b 01       	movw	r4, r22
 2c4:	3c 01       	movw	r6, r24
	avgSensor = (float) avgSensor / (sensor1 + sensor2 + sensor3 + sensor4 + sensor5 + sensor6);
 2c6:	be 01       	movw	r22, r28
 2c8:	69 0d       	add	r22, r9
 2ca:	71 1d       	adc	r23, r1
 2cc:	60 0f       	add	r22, r16
 2ce:	71 1f       	adc	r23, r17
 2d0:	6a 0d       	add	r22, r10
 2d2:	7b 1d       	adc	r23, r11
 2d4:	6e 0d       	add	r22, r14
 2d6:	7f 1d       	adc	r23, r15
 2d8:	e6 01       	movw	r28, r12
 2da:	c6 0f       	add	r28, r22
 2dc:	d7 1f       	adc	r29, r23
 2de:	be 01       	movw	r22, r28
 2e0:	dd 0f       	add	r29, r29
 2e2:	88 0b       	sbc	r24, r24
 2e4:	99 0b       	sbc	r25, r25
 2e6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__floatsisf>
 2ea:	9b 01       	movw	r18, r22
 2ec:	ac 01       	movw	r20, r24
 2ee:	c3 01       	movw	r24, r6
 2f0:	b2 01       	movw	r22, r4
 2f2:	0e 94 aa 04 	call	0x954	; 0x954 <__divsf3>

	return avgSensor;
 2f6:	56 2f       	mov	r21, r22
 2f8:	47 2f       	mov	r20, r23
 2fa:	38 2f       	mov	r19, r24
 2fc:	29 2f       	mov	r18, r25
 2fe:	04 c0       	rjmp	.+8      	; 0x308 <read_sensors+0x202>
		ledoff(6);
	}

	if(sensor1==0 && sensor2==0 && sensor3==0 && sensor4==0 && sensor5==0 && sensor6==0)
	{
		return 0xFF;
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	3f e7       	ldi	r19, 0x7F	; 127
 306:	23 e4       	ldi	r18, 0x43	; 67
	// Calculate weighted mean
	avgSensor = (float) sensor1*1 + sensor2*2 + sensor3*3 + sensor4*4 + sensor5*5 + sensor6*6;
	avgSensor = (float) avgSensor / (sensor1 + sensor2 + sensor3 + sensor4 + sensor5 + sensor6);

	return avgSensor;
 308:	65 2f       	mov	r22, r21
 30a:	74 2f       	mov	r23, r20
 30c:	83 2f       	mov	r24, r19
 30e:	92 2f       	mov	r25, r18
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	df 90       	pop	r13
 31e:	cf 90       	pop	r12
 320:	bf 90       	pop	r11
 322:	af 90       	pop	r10
 324:	9f 90       	pop	r9
 326:	7f 90       	pop	r7
 328:	6f 90       	pop	r6
 32a:	5f 90       	pop	r5
 32c:	4f 90       	pop	r4
 32e:	08 95       	ret

00000330 <led_init>:
	PB3		LED6	sensor6
*/
void led_init()
{
	//Make i/o pins as outputs
	DDRD |= (1<<PIND4) | (1<<PIND5) | (1<<PIND6) | (1<<PIND7);
 330:	8a b1       	in	r24, 0x0a	; 10
 332:	80 6f       	ori	r24, 0xF0	; 240
 334:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<PINB0)|(1<<PINB3);
 336:	84 b1       	in	r24, 0x04	; 4
 338:	89 60       	ori	r24, 0x09	; 9
 33a:	84 b9       	out	0x04, r24	; 4
	
	//Make them high to turn off led.
	//LEDs are anode activated
	PORTD |= (1<<PIND4) | (1<<PIND5) | (1<<PIND6) | (1<<PIND7);
 33c:	8b b1       	in	r24, 0x0b	; 11
 33e:	80 6f       	ori	r24, 0xF0	; 240
 340:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<PINB0)|(1<<PINB3);
 342:	85 b1       	in	r24, 0x05	; 5
 344:	89 60       	ori	r24, 0x09	; 9
 346:	85 b9       	out	0x05, r24	; 5
 348:	08 95       	ret

0000034a <test_leds>:
}
void test_leds()
{
	int i;
	for(i=0; i<3; i++)
 34a:	20 e0       	ldi	r18, 0x00	; 0
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	5c c0       	rjmp	.+184    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		PORTD &=~(1<<PIND4); //On
 350:	8b b1       	in	r24, 0x0b	; 11
 352:	8f 7e       	andi	r24, 0xEF	; 239
 354:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	4f ef       	ldi	r20, 0xFF	; 255
 358:	81 ee       	ldi	r24, 0xE1	; 225
 35a:	94 e0       	ldi	r25, 0x04	; 4
 35c:	41 50       	subi	r20, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <test_leds+0x12>
 364:	00 c0       	rjmp	.+0      	; 0x366 <test_leds+0x1c>
 366:	00 00       	nop
		_delay_ms(100);
		PORTD |= (1<<PIND4);//Off
 368:	8b b1       	in	r24, 0x0b	; 11
 36a:	80 61       	ori	r24, 0x10	; 16
 36c:	8b b9       	out	0x0b, r24	; 11
	
		PORTD &=~(1<<PIND5); //On
 36e:	8b b1       	in	r24, 0x0b	; 11
 370:	8f 7d       	andi	r24, 0xDF	; 223
 372:	8b b9       	out	0x0b, r24	; 11
 374:	4f ef       	ldi	r20, 0xFF	; 255
 376:	81 ee       	ldi	r24, 0xE1	; 225
 378:	94 e0       	ldi	r25, 0x04	; 4
 37a:	41 50       	subi	r20, 0x01	; 1
 37c:	80 40       	sbci	r24, 0x00	; 0
 37e:	90 40       	sbci	r25, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <test_leds+0x30>
 382:	00 c0       	rjmp	.+0      	; 0x384 <test_leds+0x3a>
 384:	00 00       	nop
		_delay_ms(100);
		PORTD |= (1<<PIND5);//Off
 386:	8b b1       	in	r24, 0x0b	; 11
 388:	80 62       	ori	r24, 0x20	; 32
 38a:	8b b9       	out	0x0b, r24	; 11
	
		PORTD &=~(1<<PIND6); //On
 38c:	8b b1       	in	r24, 0x0b	; 11
 38e:	8f 7b       	andi	r24, 0xBF	; 191
 390:	8b b9       	out	0x0b, r24	; 11
 392:	4f ef       	ldi	r20, 0xFF	; 255
 394:	81 ee       	ldi	r24, 0xE1	; 225
 396:	94 e0       	ldi	r25, 0x04	; 4
 398:	41 50       	subi	r20, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <test_leds+0x4e>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <test_leds+0x58>
 3a2:	00 00       	nop
		_delay_ms(100);
		PORTD |= (1<<PIND6);//Off
 3a4:	8b b1       	in	r24, 0x0b	; 11
 3a6:	80 64       	ori	r24, 0x40	; 64
 3a8:	8b b9       	out	0x0b, r24	; 11
	
		PORTD &=~(1<<PIND7); //On
 3aa:	8b b1       	in	r24, 0x0b	; 11
 3ac:	8f 77       	andi	r24, 0x7F	; 127
 3ae:	8b b9       	out	0x0b, r24	; 11
 3b0:	4f ef       	ldi	r20, 0xFF	; 255
 3b2:	81 ee       	ldi	r24, 0xE1	; 225
 3b4:	94 e0       	ldi	r25, 0x04	; 4
 3b6:	41 50       	subi	r20, 0x01	; 1
 3b8:	80 40       	sbci	r24, 0x00	; 0
 3ba:	90 40       	sbci	r25, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <test_leds+0x6c>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <test_leds+0x76>
 3c0:	00 00       	nop
		_delay_ms(100);
		PORTD |= (1<<PIND7);//Off
 3c2:	8b b1       	in	r24, 0x0b	; 11
 3c4:	80 68       	ori	r24, 0x80	; 128
 3c6:	8b b9       	out	0x0b, r24	; 11
	
		PORTB &=~(1<<PINB0); //On
 3c8:	85 b1       	in	r24, 0x05	; 5
 3ca:	8e 7f       	andi	r24, 0xFE	; 254
 3cc:	85 b9       	out	0x05, r24	; 5
 3ce:	4f ef       	ldi	r20, 0xFF	; 255
 3d0:	81 ee       	ldi	r24, 0xE1	; 225
 3d2:	94 e0       	ldi	r25, 0x04	; 4
 3d4:	41 50       	subi	r20, 0x01	; 1
 3d6:	80 40       	sbci	r24, 0x00	; 0
 3d8:	90 40       	sbci	r25, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <test_leds+0x8a>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <test_leds+0x94>
 3de:	00 00       	nop
		_delay_ms(100);
		PORTB |= (1<<PINB0);//Off
 3e0:	85 b1       	in	r24, 0x05	; 5
 3e2:	81 60       	ori	r24, 0x01	; 1
 3e4:	85 b9       	out	0x05, r24	; 5

		PORTB &=~(1<<PINB3); //On
 3e6:	85 b1       	in	r24, 0x05	; 5
 3e8:	87 7f       	andi	r24, 0xF7	; 247
 3ea:	85 b9       	out	0x05, r24	; 5
 3ec:	4f ef       	ldi	r20, 0xFF	; 255
 3ee:	81 ee       	ldi	r24, 0xE1	; 225
 3f0:	94 e0       	ldi	r25, 0x04	; 4
 3f2:	41 50       	subi	r20, 0x01	; 1
 3f4:	80 40       	sbci	r24, 0x00	; 0
 3f6:	90 40       	sbci	r25, 0x00	; 0
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <test_leds+0xa8>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <test_leds+0xb2>
 3fc:	00 00       	nop
		_delay_ms(100);
		PORTB |= (1<<PINB3);//Off
 3fe:	85 b1       	in	r24, 0x05	; 5
 400:	88 60       	ori	r24, 0x08	; 8
 402:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<PINB0)|(1<<PINB3);
}
void test_leds()
{
	int i;
	for(i=0; i<3; i++)
 404:	2f 5f       	subi	r18, 0xFF	; 255
 406:	3f 4f       	sbci	r19, 0xFF	; 255
 408:	23 30       	cpi	r18, 0x03	; 3
 40a:	31 05       	cpc	r19, r1
 40c:	0c f4       	brge	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40e:	a0 cf       	rjmp	.-192    	; 0x350 <test_leds+0x6>

		PORTB &=~(1<<PINB3); //On
		_delay_ms(100);
		PORTB |= (1<<PINB3);//Off
	}
}
 410:	08 95       	ret

00000412 <ledon>:

void ledon(uint8_t id)
{
		if (id<=4){
 412:	85 30       	cpi	r24, 0x05	; 5
 414:	80 f4       	brcc	.+32     	; 0x436 <ledon+0x24>
			PORTD &= ~(1<<(id+3));
 416:	4b b1       	in	r20, 0x0b	; 11
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	03 96       	adiw	r24, 0x03	; 3
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	b9 01       	movw	r22, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <ledon+0x16>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	8a 95       	dec	r24
 42a:	e2 f7       	brpl	.-8      	; 0x424 <ledon+0x12>
 42c:	cb 01       	movw	r24, r22
 42e:	80 95       	com	r24
 430:	84 23       	and	r24, r20
 432:	8b b9       	out	0x0b, r24	; 11
 434:	08 95       	ret
		}
		else if (id == 5){
 436:	85 30       	cpi	r24, 0x05	; 5
 438:	21 f4       	brne	.+8      	; 0x442 <ledon+0x30>
			PORTB &= ~(1<<PINB0);
 43a:	85 b1       	in	r24, 0x05	; 5
 43c:	8e 7f       	andi	r24, 0xFE	; 254
 43e:	85 b9       	out	0x05, r24	; 5
 440:	08 95       	ret
		}
		else if (id == 6){
 442:	86 30       	cpi	r24, 0x06	; 6
 444:	19 f4       	brne	.+6      	; 0x44c <ledon+0x3a>
			PORTB &= ~(1<<PINB3);
 446:	85 b1       	in	r24, 0x05	; 5
 448:	87 7f       	andi	r24, 0xF7	; 247
 44a:	85 b9       	out	0x05, r24	; 5
 44c:	08 95       	ret

0000044e <ledoff>:
		}
}

void ledoff(uint8_t id)
{
	if (id<=4){
 44e:	85 30       	cpi	r24, 0x05	; 5
 450:	70 f4       	brcc	.+28     	; 0x46e <ledoff+0x20>
		PORTD |= (1<<(id+3));
 452:	9b b1       	in	r25, 0x0b	; 11
 454:	48 2f       	mov	r20, r24
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	4d 5f       	subi	r20, 0xFD	; 253
 45a:	5f 4f       	sbci	r21, 0xFF	; 255
 45c:	21 e0       	ldi	r18, 0x01	; 1
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <ledoff+0x18>
 462:	22 0f       	add	r18, r18
 464:	33 1f       	adc	r19, r19
 466:	4a 95       	dec	r20
 468:	e2 f7       	brpl	.-8      	; 0x462 <ledoff+0x14>
 46a:	29 2b       	or	r18, r25
 46c:	2b b9       	out	0x0b, r18	; 11
	}
	if (id == 5){
 46e:	85 30       	cpi	r24, 0x05	; 5
 470:	19 f4       	brne	.+6      	; 0x478 <ledoff+0x2a>
			PORTB |= (1<<PINB0);
 472:	95 b1       	in	r25, 0x05	; 5
 474:	91 60       	ori	r25, 0x01	; 1
 476:	95 b9       	out	0x05, r25	; 5
	}
    if (id == 6){
 478:	86 30       	cpi	r24, 0x06	; 6
 47a:	19 f4       	brne	.+6      	; 0x482 <ledoff+0x34>
			PORTB |= (1<<PINB3);
 47c:	85 b1       	in	r24, 0x05	; 5
 47e:	88 60       	ori	r24, 0x08	; 8
 480:	85 b9       	out	0x05, r24	; 5
 482:	08 95       	ret

00000484 <pid>:
int32_t errorP  =0;		
float control;

////implentacion del PID/////
float pid(float cur_value,float req_value)
{
 484:	4f 92       	push	r4
 486:	5f 92       	push	r5
 488:	6f 92       	push	r6
 48a:	7f 92       	push	r7
 48c:	8f 92       	push	r8
 48e:	9f 92       	push	r9
 490:	af 92       	push	r10
 492:	bf 92       	push	r11
 494:	cf 92       	push	r12
 496:	df 92       	push	r13
 498:	ef 92       	push	r14
 49a:	ff 92       	push	r15
 49c:	6b 01       	movw	r12, r22
 49e:	7c 01       	movw	r14, r24
 4a0:	ca 01       	movw	r24, r20
 4a2:	b9 01       	movw	r22, r18
	float pid;
	float error;

	error = req_value - cur_value;
 4a4:	a7 01       	movw	r20, r14
 4a6:	96 01       	movw	r18, r12
 4a8:	0e 94 38 04 	call	0x870	; 0x870 <__subsf3>
 4ac:	6b 01       	movw	r12, r22
 4ae:	7c 01       	movw	r14, r24
	pid = (Kp * error)  + (Ki * errorI) + (Kd * (error - errorP));
 4b0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <Kp>
 4b4:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <Kp+0x1>
 4b8:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <Kp+0x2>
 4bc:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <Kp+0x3>
 4c0:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsf3>
 4c4:	2b 01       	movw	r4, r22
 4c6:	3c 01       	movw	r6, r24
 4c8:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <errorI>
 4cc:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <errorI+0x1>
 4d0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <errorI+0x2>
 4d4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <errorI+0x3>
 4d8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__floatsisf>
 4dc:	4b 01       	movw	r8, r22
 4de:	5c 01       	movw	r10, r24
 4e0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <Ki>
 4e4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <Ki+0x1>
 4e8:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <Ki+0x2>
 4ec:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <Ki+0x3>
 4f0:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsf3>
 4f4:	9b 01       	movw	r18, r22
 4f6:	ac 01       	movw	r20, r24
 4f8:	c3 01       	movw	r24, r6
 4fa:	b2 01       	movw	r22, r4
 4fc:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
 500:	2b 01       	movw	r4, r22
 502:	3c 01       	movw	r6, r24
 504:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <__data_end>
 508:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <__data_end+0x1>
 50c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end+0x2>
 510:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x3>
 514:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__floatsisf>
 518:	9b 01       	movw	r18, r22
 51a:	ac 01       	movw	r20, r24
 51c:	c7 01       	movw	r24, r14
 51e:	b6 01       	movw	r22, r12
 520:	0e 94 38 04 	call	0x870	; 0x870 <__subsf3>
 524:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 528:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 52c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 530:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 534:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsf3>
 538:	9b 01       	movw	r18, r22
 53a:	ac 01       	movw	r20, r24
 53c:	c3 01       	movw	r24, r6
 53e:	b2 01       	movw	r22, r4
 540:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
 544:	2b 01       	movw	r4, r22
 546:	3c 01       	movw	r6, r24

	errorI += error;                  // La integral es la suma simple del error
 548:	a5 01       	movw	r20, r10
 54a:	94 01       	movw	r18, r8
 54c:	c7 01       	movw	r24, r14
 54e:	b6 01       	movw	r22, r12
 550:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
 554:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fixsfsi>
 558:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <errorI>
 55c:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <errorI+0x1>
 560:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <errorI+0x2>
 564:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <errorI+0x3>
	errorP = error;                    // Guarda el error anterior
 568:	c7 01       	movw	r24, r14
 56a:	b6 01       	movw	r22, r12
 56c:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fixsfsi>
 570:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <__data_end>
 574:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <__data_end+0x1>
 578:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end+0x2>
 57c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x3>

	return pid;
}
 580:	c3 01       	movw	r24, r6
 582:	b2 01       	movw	r22, r4
 584:	ff 90       	pop	r15
 586:	ef 90       	pop	r14
 588:	df 90       	pop	r13
 58a:	cf 90       	pop	r12
 58c:	bf 90       	pop	r11
 58e:	af 90       	pop	r10
 590:	9f 90       	pop	r9
 592:	8f 90       	pop	r8
 594:	7f 90       	pop	r7
 596:	6f 90       	pop	r6
 598:	5f 90       	pop	r5
 59a:	4f 90       	pop	r4
 59c:	08 95       	ret

0000059e <main>:

int main(void)
{
    led_init();
 59e:	0e 94 98 01 	call	0x330	; 0x330 <led_init>
    test_leds();
 5a2:	0e 94 a5 01 	call	0x34a	; 0x34a <test_leds>
	motors_init();
 5a6:	0e 94 b8 03 	call	0x770	; 0x770 <motors_init>
	adc_init();
 5aa:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	//Leyendo el punto del sensor anterior
	float setpoint_anterior=0.0;
 5ae:	c1 2c       	mov	r12, r1
 5b0:	d1 2c       	mov	r13, r1
 5b2:	76 01       	movw	r14, r12
	
    while (1) 
    {
		////////////// La funcion que tiene el set point es con la suma ponderada sacar el valor de los dos leds de intermedio
		////////////// Lo cual al hacer la suma ponderada de 1 al 6, la mitad es 3.5 teniendo tanto el sensor 3 y 4 prendidos detectando el valor
		setpoint=read_sensors();
 5b4:	0e 94 83 00 	call	0x106	; 0x106 <read_sensors>
 5b8:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <setpoint>
 5bc:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <setpoint+0x1>
 5c0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <setpoint+0x2>
 5c4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <setpoint+0x3>
		
		///////Si el sensor no encuentra ninguna linea regresa a el valor anterior
		if(setpoint==0xFF)
 5c8:	20 e0       	ldi	r18, 0x00	; 0
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	4f e7       	ldi	r20, 0x7F	; 127
 5ce:	53 e4       	ldi	r21, 0x43	; 67
 5d0:	0e 94 a5 04 	call	0x94a	; 0x94a <__cmpsf2>
 5d4:	81 11       	cpse	r24, r1
 5d6:	08 c0       	rjmp	.+16     	; 0x5e8 <main+0x4a>
		{
			setpoint=setpoint_anterior;
 5d8:	c0 92 18 01 	sts	0x0118, r12	; 0x800118 <setpoint>
 5dc:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <setpoint+0x1>
 5e0:	e0 92 1a 01 	sts	0x011A, r14	; 0x80011a <setpoint+0x2>
 5e4:	f0 92 1b 01 	sts	0x011B, r15	; 0x80011b <setpoint+0x3>
		}
		
		/////////// El algoritmo de control es decirle a PID, que cuando  se encuentre en medio del setpoint o el 3.5  regrese a tomar las funciones vistas en el PID
		control = pid(setpoint,3.5);
 5e8:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <setpoint>
 5ec:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <setpoint+0x1>
 5f0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <setpoint+0x2>
 5f4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <setpoint+0x3>
 5f8:	20 e0       	ldi	r18, 0x00	; 0
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	40 e6       	ldi	r20, 0x60	; 96
 5fe:	50 e4       	ldi	r21, 0x40	; 64
 600:	0e 94 42 02 	call	0x484	; 0x484 <pid>
 604:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <control>
 608:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <control+0x1>
 60c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <control+0x2>
 610:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <control+0x3>
		
		//////La variable control va de el limite de los motores, al tener la funcion del motor derecho e izquierdo
		////// y cada motor al valer 255, se hace la suma 255+255=510 teniendo en cuenta el funcionamiento o la 
		//////potencia de ambos motores
		if(control > 510)
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	4f ef       	ldi	r20, 0xFF	; 255
 61a:	53 e4       	ldi	r21, 0x43	; 67
 61c:	0e 94 04 06 	call	0xc08	; 0xc08 <__gesf2>
 620:	18 16       	cp	r1, r24
 622:	64 f4       	brge	.+24     	; 0x63c <main+0x9e>
		control = 510;
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	af ef       	ldi	r26, 0xFF	; 255
 62a:	b3 e4       	ldi	r27, 0x43	; 67
 62c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <control>
 630:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <control+0x1>
 634:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <control+0x2>
 638:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <control+0x3>
		if(control < -510)
 63c:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <control>
 640:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <control+0x1>
 644:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <control+0x2>
 648:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <control+0x3>
 64c:	20 e0       	ldi	r18, 0x00	; 0
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	4f ef       	ldi	r20, 0xFF	; 255
 652:	53 ec       	ldi	r21, 0xC3	; 195
 654:	0e 94 a5 04 	call	0x94a	; 0x94a <__cmpsf2>
 658:	88 23       	and	r24, r24
 65a:	64 f4       	brge	.+24     	; 0x674 <main+0xd6>
		control = -510;
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	af ef       	ldi	r26, 0xFF	; 255
 662:	b3 ec       	ldi	r27, 0xC3	; 195
 664:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <control>
 668:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <control+0x1>
 66c:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <control+0x2>
 670:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <control+0x3>
		//Esta funcion es para el sensor izquierdo al no tener la linea este debe controlar su velocidad para corregir
		if(control >= 0.0)
 674:	c0 90 14 01 	lds	r12, 0x0114	; 0x800114 <control>
 678:	d0 90 15 01 	lds	r13, 0x0115	; 0x800115 <control+0x1>
 67c:	e0 90 16 01 	lds	r14, 0x0116	; 0x800116 <control+0x2>
 680:	f0 90 17 01 	lds	r15, 0x0117	; 0x800117 <control+0x3>
 684:	20 e0       	ldi	r18, 0x00	; 0
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	a9 01       	movw	r20, r18
 68a:	c7 01       	movw	r24, r14
 68c:	b6 01       	movw	r22, r12
 68e:	0e 94 04 06 	call	0xc08	; 0xc08 <__gesf2>
 692:	88 23       	and	r24, r24
 694:	4c f1       	brlt	.+82     	; 0x6e8 <main+0x14a>
		{
			if(control>255)
 696:	20 e0       	ldi	r18, 0x00	; 0
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	4f e7       	ldi	r20, 0x7F	; 127
 69c:	53 e4       	ldi	r21, 0x43	; 67
 69e:	c7 01       	movw	r24, r14
 6a0:	b6 01       	movw	r22, r12
 6a2:	0e 94 04 06 	call	0xc08	; 0xc08 <__gesf2>
 6a6:	18 16       	cp	r1, r24
 6a8:	74 f4       	brge	.+28     	; 0x6c6 <main+0x128>
			motor_left(MOTOR_BACKWARD,control-255);
 6aa:	20 e0       	ldi	r18, 0x00	; 0
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	4f e7       	ldi	r20, 0x7F	; 127
 6b0:	53 e4       	ldi	r21, 0x43	; 67
 6b2:	c7 01       	movw	r24, r14
 6b4:	b6 01       	movw	r22, r12
 6b6:	0e 94 38 04 	call	0x870	; 0x870 <__subsf3>
 6ba:	0e 94 23 05 	call	0xa46	; 0xa46 <__fixunssfsi>
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	0e 94 00 04 	call	0x800	; 0x800 <motor_left>
 6c4:	0d c0       	rjmp	.+26     	; 0x6e0 <main+0x142>
			else
			motor_left(MOTOR_FORWARD,255-control);
 6c6:	a7 01       	movw	r20, r14
 6c8:	96 01       	movw	r18, r12
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	8f e7       	ldi	r24, 0x7F	; 127
 6d0:	93 e4       	ldi	r25, 0x43	; 67
 6d2:	0e 94 38 04 	call	0x870	; 0x870 <__subsf3>
 6d6:	0e 94 23 05 	call	0xa46	; 0xa46 <__fixunssfsi>
 6da:	82 e0       	ldi	r24, 0x02	; 2
 6dc:	0e 94 00 04 	call	0x800	; 0x800 <motor_left>
			
			motor_right(MOTOR_BACKWARD,255);
 6e0:	6f ef       	ldi	r22, 0xFF	; 255
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	0e 94 c8 03 	call	0x790	; 0x790 <motor_right>
		}
		//Esta funcion es para el sensor derecha al no tener la linea este debe controlar su velocidad para corregir
		if(control <= 0.0)
 6e8:	c0 90 14 01 	lds	r12, 0x0114	; 0x800114 <control>
 6ec:	d0 90 15 01 	lds	r13, 0x0115	; 0x800115 <control+0x1>
 6f0:	e0 90 16 01 	lds	r14, 0x0116	; 0x800116 <control+0x2>
 6f4:	f0 90 17 01 	lds	r15, 0x0117	; 0x800117 <control+0x3>
 6f8:	20 e0       	ldi	r18, 0x00	; 0
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	a9 01       	movw	r20, r18
 6fe:	c7 01       	movw	r24, r14
 700:	b6 01       	movw	r22, r12
 702:	0e 94 a5 04 	call	0x94a	; 0x94a <__cmpsf2>
 706:	18 16       	cp	r1, r24
 708:	54 f1       	brlt	.+84     	; 0x75e <main+0x1c0>
		{
			if(control<-255)
 70a:	20 e0       	ldi	r18, 0x00	; 0
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	4f e7       	ldi	r20, 0x7F	; 127
 710:	53 ec       	ldi	r21, 0xC3	; 195
 712:	c7 01       	movw	r24, r14
 714:	b6 01       	movw	r22, r12
 716:	0e 94 a5 04 	call	0x94a	; 0x94a <__cmpsf2>
 71a:	88 23       	and	r24, r24
 71c:	7c f4       	brge	.+30     	; 0x73c <main+0x19e>
			motor_right(MOTOR_FORWARD,-(control+255));
 71e:	20 e0       	ldi	r18, 0x00	; 0
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	4f e7       	ldi	r20, 0x7F	; 127
 724:	53 e4       	ldi	r21, 0x43	; 67
 726:	c7 01       	movw	r24, r14
 728:	b6 01       	movw	r22, r12
 72a:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
 72e:	90 58       	subi	r25, 0x80	; 128
 730:	0e 94 23 05 	call	0xa46	; 0xa46 <__fixunssfsi>
 734:	82 e0       	ldi	r24, 0x02	; 2
 736:	0e 94 c8 03 	call	0x790	; 0x790 <motor_right>
 73a:	0d c0       	rjmp	.+26     	; 0x756 <main+0x1b8>
			else
			motor_right(MOTOR_BACKWARD,255+control);
 73c:	20 e0       	ldi	r18, 0x00	; 0
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	4f e7       	ldi	r20, 0x7F	; 127
 742:	53 e4       	ldi	r21, 0x43	; 67
 744:	c7 01       	movw	r24, r14
 746:	b6 01       	movw	r22, r12
 748:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3>
 74c:	0e 94 23 05 	call	0xa46	; 0xa46 <__fixunssfsi>
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	0e 94 c8 03 	call	0x790	; 0x790 <motor_right>
			
			motor_left(MOTOR_FORWARD,255);
 756:	6f ef       	ldi	r22, 0xFF	; 255
 758:	82 e0       	ldi	r24, 0x02	; 2
 75a:	0e 94 00 04 	call	0x800	; 0x800 <motor_left>
		}
		
		setpoint_anterior=setpoint;
 75e:	c0 90 18 01 	lds	r12, 0x0118	; 0x800118 <setpoint>
 762:	d0 90 19 01 	lds	r13, 0x0119	; 0x800119 <setpoint+0x1>
 766:	e0 90 1a 01 	lds	r14, 0x011A	; 0x80011a <setpoint+0x2>
 76a:	f0 90 1b 01 	lds	r15, 0x011B	; 0x80011b <setpoint+0x3>
		
    }
 76e:	22 cf       	rjmp	.-444    	; 0x5b4 <main+0x16>

00000770 <motors_init>:
	/* set up pwm for speed control
	*  COM1A1=1 Clear OC1A/OC1B on Compare Match (Set output to low level)
	*  COM1B1=1 Clear OC1A/OC1B on Compare Match when up-counting. Set OC1A/OC1B on Compare Match when downcounting.
	*  WGM10=1 PWM, Phase Correct, 8-bit
	*/
	TCCR1A=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM10); 
 770:	81 ea       	ldi	r24, 0xA1	; 161
 772:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	
	/*clk=fcpu/256 (16 Mhz/256= aprox 62 Khz)
	* to operate dc motor nicely
	* CS12=1, clk/256 (From prescaler)
	*/
	TCCR1B=(1<<CS12);
 776:	84 e0       	ldi	r24, 0x04	; 4
 778:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	//Set the corresponding port pin to output
	DDRB|=(1<<PINB1); //OC1A enable for right motor
 77c:	84 b1       	in	r24, 0x04	; 4
 77e:	82 60       	ori	r24, 0x02	; 2
 780:	84 b9       	out	0x04, r24	; 4
	DDRB|=(1<<PINB2); //OC1B enable for left motor
 782:	84 b1       	in	r24, 0x04	; 4
 784:	84 60       	ori	r24, 0x04	; 4
 786:	84 b9       	out	0x04, r24	; 4
	*		|
	* PB2	|	ENB -
	* PD2	|	IN3	|--> LEFT MOTOR
	* PD3	|	IN4 -
	* -------------*/
	DDRD|=0X0F;	//PD0 to PD3 as output
 788:	8a b1       	in	r24, 0x0a	; 10
 78a:	8f 60       	ori	r24, 0x0F	; 15
 78c:	8a b9       	out	0x0a, r24	; 10
 78e:	08 95       	ret

00000790 <motor_right>:
* speed = any value from 0 to 255
* Example of use:
* MotorA(MOTOR_FORWARD,120);
*****************************************************************/
void motor_right(uint8_t dir,uint8_t speed) 
{
 790:	cf 93       	push	r28
	//Direction
	if(dir == MOTOR_STOP)
 792:	81 11       	cpse	r24, r1
 794:	07 c0       	rjmp	.+14     	; 0x7a4 <motor_right+0x14>
	{
		PORTD &=(~(1<<PD0));
 796:	8b b1       	in	r24, 0x0b	; 11
 798:	8e 7f       	andi	r24, 0xFE	; 254
 79a:	8b b9       	out	0x0b, r24	; 11
		PORTD &=(~(1<<PD1));
 79c:	8b b1       	in	r24, 0x0b	; 11
 79e:	8d 7f       	andi	r24, 0xFD	; 253
 7a0:	8b b9       	out	0x0b, r24	; 11
 7a2:	11 c0       	rjmp	.+34     	; 0x7c6 <motor_right+0x36>
	}

	else if(dir == MOTOR_BACKWARD)
 7a4:	81 30       	cpi	r24, 0x01	; 1
 7a6:	39 f4       	brne	.+14     	; 0x7b6 <motor_right+0x26>
	{
		PORTD &=(~(1<<PD1));
 7a8:	8b b1       	in	r24, 0x0b	; 11
 7aa:	8d 7f       	andi	r24, 0xFD	; 253
 7ac:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PD0);
 7ae:	8b b1       	in	r24, 0x0b	; 11
 7b0:	81 60       	ori	r24, 0x01	; 1
 7b2:	8b b9       	out	0x0b, r24	; 11
 7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <motor_right+0x36>
	}
	else if(dir == MOTOR_FORWARD)
 7b6:	82 30       	cpi	r24, 0x02	; 2
 7b8:	31 f4       	brne	.+12     	; 0x7c6 <motor_right+0x36>
	{
		PORTD &=(~(1<<PD0));
 7ba:	8b b1       	in	r24, 0x0b	; 11
 7bc:	8e 7f       	andi	r24, 0xFE	; 254
 7be:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PD1);
 7c0:	8b b1       	in	r24, 0x0b	; 11
 7c2:	82 60       	ori	r24, 0x02	; 2
 7c4:	8b b9       	out	0x0b, r24	; 11
	}

	//Speed
	uint8_t sreg=SREG;//Status Register
 7c6:	cf b7       	in	r28, 0x3f	; 63

	cli();
 7c8:	f8 94       	cli

	OCR1A=(uint8_t)(((float)speed/255.0)*ROBO_SPEED);
 7ca:	70 e0       	ldi	r23, 0x00	; 0
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__floatunsisf>
 7d4:	20 e0       	ldi	r18, 0x00	; 0
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	4f e7       	ldi	r20, 0x7F	; 127
 7da:	53 e4       	ldi	r21, 0x43	; 67
 7dc:	0e 94 aa 04 	call	0x954	; 0x954 <__divsf3>
 7e0:	20 e0       	ldi	r18, 0x00	; 0
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	40 ef       	ldi	r20, 0xF0	; 240
 7e6:	52 e4       	ldi	r21, 0x42	; 66
 7e8:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsf3>
 7ec:	0e 94 23 05 	call	0xa46	; 0xa46 <__fixunssfsi>
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 7f6:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	SREG=sreg;
 7fa:	cf bf       	out	0x3f, r28	; 63
}
 7fc:	cf 91       	pop	r28
 7fe:	08 95       	ret

00000800 <motor_left>:
* speed = any value from 0 to 255
* Example of use:
* MotorB(MOTOR_FORWARD,120);
*****************************************************************/
void motor_left(uint8_t dir,uint8_t speed)
{
 800:	cf 93       	push	r28
	//Direction
	if(dir == MOTOR_STOP)
 802:	81 11       	cpse	r24, r1
 804:	07 c0       	rjmp	.+14     	; 0x814 <motor_left+0x14>
	{
		PORTD &=(~(1<<PD2));
 806:	8b b1       	in	r24, 0x0b	; 11
 808:	8b 7f       	andi	r24, 0xFB	; 251
 80a:	8b b9       	out	0x0b, r24	; 11
		PORTD &=(~(1<<PD3));
 80c:	8b b1       	in	r24, 0x0b	; 11
 80e:	87 7f       	andi	r24, 0xF7	; 247
 810:	8b b9       	out	0x0b, r24	; 11
 812:	11 c0       	rjmp	.+34     	; 0x836 <motor_left+0x36>
	}

	else if(dir == MOTOR_FORWARD)
 814:	82 30       	cpi	r24, 0x02	; 2
 816:	39 f4       	brne	.+14     	; 0x826 <motor_left+0x26>
	{
		PORTD &=(~(1<<PD2));
 818:	8b b1       	in	r24, 0x0b	; 11
 81a:	8b 7f       	andi	r24, 0xFB	; 251
 81c:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PD3);
 81e:	8b b1       	in	r24, 0x0b	; 11
 820:	88 60       	ori	r24, 0x08	; 8
 822:	8b b9       	out	0x0b, r24	; 11
 824:	08 c0       	rjmp	.+16     	; 0x836 <motor_left+0x36>
	}
	else if(dir == MOTOR_BACKWARD)
 826:	81 30       	cpi	r24, 0x01	; 1
 828:	31 f4       	brne	.+12     	; 0x836 <motor_left+0x36>
	{
		PORTD &=(~(1<<PD3));
 82a:	8b b1       	in	r24, 0x0b	; 11
 82c:	87 7f       	andi	r24, 0xF7	; 247
 82e:	8b b9       	out	0x0b, r24	; 11
		PORTD |=(1<<PD2);
 830:	8b b1       	in	r24, 0x0b	; 11
 832:	84 60       	ori	r24, 0x04	; 4
 834:	8b b9       	out	0x0b, r24	; 11
	}

	//Speed
	uint8_t sreg=SREG;
 836:	cf b7       	in	r28, 0x3f	; 63

	cli();
 838:	f8 94       	cli

	OCR1B=(uint8_t)(((float)speed/255.0)*ROBO_SPEED);
 83a:	70 e0       	ldi	r23, 0x00	; 0
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__floatunsisf>
 844:	20 e0       	ldi	r18, 0x00	; 0
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	4f e7       	ldi	r20, 0x7F	; 127
 84a:	53 e4       	ldi	r21, 0x43	; 67
 84c:	0e 94 aa 04 	call	0x954	; 0x954 <__divsf3>
 850:	20 e0       	ldi	r18, 0x00	; 0
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	40 ef       	ldi	r20, 0xF0	; 240
 856:	52 e4       	ldi	r21, 0x42	; 66
 858:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsf3>
 85c:	0e 94 23 05 	call	0xa46	; 0xa46 <__fixunssfsi>
 860:	70 e0       	ldi	r23, 0x00	; 0
 862:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 866:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>

	SREG=sreg;
 86a:	cf bf       	out	0x3f, r28	; 63
}
 86c:	cf 91       	pop	r28
 86e:	08 95       	ret

00000870 <__subsf3>:
 870:	50 58       	subi	r21, 0x80	; 128

00000872 <__addsf3>:
 872:	bb 27       	eor	r27, r27
 874:	aa 27       	eor	r26, r26
 876:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__addsf3x>
 87a:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__fp_round>
 87e:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscA>
 882:	38 f0       	brcs	.+14     	; 0x892 <__addsf3+0x20>
 884:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fp_pscB>
 888:	20 f0       	brcs	.+8      	; 0x892 <__addsf3+0x20>
 88a:	39 f4       	brne	.+14     	; 0x89a <__addsf3+0x28>
 88c:	9f 3f       	cpi	r25, 0xFF	; 255
 88e:	19 f4       	brne	.+6      	; 0x896 <__addsf3+0x24>
 890:	26 f4       	brtc	.+8      	; 0x89a <__addsf3+0x28>
 892:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_nan>
 896:	0e f4       	brtc	.+2      	; 0x89a <__addsf3+0x28>
 898:	e0 95       	com	r30
 89a:	e7 fb       	bst	r30, 7
 89c:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_inf>

000008a0 <__addsf3x>:
 8a0:	e9 2f       	mov	r30, r25
 8a2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fp_split3>
 8a6:	58 f3       	brcs	.-42     	; 0x87e <__addsf3+0xc>
 8a8:	ba 17       	cp	r27, r26
 8aa:	62 07       	cpc	r22, r18
 8ac:	73 07       	cpc	r23, r19
 8ae:	84 07       	cpc	r24, r20
 8b0:	95 07       	cpc	r25, r21
 8b2:	20 f0       	brcs	.+8      	; 0x8bc <__addsf3x+0x1c>
 8b4:	79 f4       	brne	.+30     	; 0x8d4 <__addsf3x+0x34>
 8b6:	a6 f5       	brtc	.+104    	; 0x920 <__stack+0x21>
 8b8:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_zero>
 8bc:	0e f4       	brtc	.+2      	; 0x8c0 <__addsf3x+0x20>
 8be:	e0 95       	com	r30
 8c0:	0b 2e       	mov	r0, r27
 8c2:	ba 2f       	mov	r27, r26
 8c4:	a0 2d       	mov	r26, r0
 8c6:	0b 01       	movw	r0, r22
 8c8:	b9 01       	movw	r22, r18
 8ca:	90 01       	movw	r18, r0
 8cc:	0c 01       	movw	r0, r24
 8ce:	ca 01       	movw	r24, r20
 8d0:	a0 01       	movw	r20, r0
 8d2:	11 24       	eor	r1, r1
 8d4:	ff 27       	eor	r31, r31
 8d6:	59 1b       	sub	r21, r25
 8d8:	99 f0       	breq	.+38     	; 0x900 <__stack+0x1>
 8da:	59 3f       	cpi	r21, 0xF9	; 249
 8dc:	50 f4       	brcc	.+20     	; 0x8f2 <__addsf3x+0x52>
 8de:	50 3e       	cpi	r21, 0xE0	; 224
 8e0:	68 f1       	brcs	.+90     	; 0x93c <__stack+0x3d>
 8e2:	1a 16       	cp	r1, r26
 8e4:	f0 40       	sbci	r31, 0x00	; 0
 8e6:	a2 2f       	mov	r26, r18
 8e8:	23 2f       	mov	r18, r19
 8ea:	34 2f       	mov	r19, r20
 8ec:	44 27       	eor	r20, r20
 8ee:	58 5f       	subi	r21, 0xF8	; 248
 8f0:	f3 cf       	rjmp	.-26     	; 0x8d8 <__addsf3x+0x38>
 8f2:	46 95       	lsr	r20
 8f4:	37 95       	ror	r19
 8f6:	27 95       	ror	r18
 8f8:	a7 95       	ror	r26
 8fa:	f0 40       	sbci	r31, 0x00	; 0
 8fc:	53 95       	inc	r21
 8fe:	c9 f7       	brne	.-14     	; 0x8f2 <__addsf3x+0x52>
 900:	7e f4       	brtc	.+30     	; 0x920 <__stack+0x21>
 902:	1f 16       	cp	r1, r31
 904:	ba 0b       	sbc	r27, r26
 906:	62 0b       	sbc	r22, r18
 908:	73 0b       	sbc	r23, r19
 90a:	84 0b       	sbc	r24, r20
 90c:	ba f0       	brmi	.+46     	; 0x93c <__stack+0x3d>
 90e:	91 50       	subi	r25, 0x01	; 1
 910:	a1 f0       	breq	.+40     	; 0x93a <__stack+0x3b>
 912:	ff 0f       	add	r31, r31
 914:	bb 1f       	adc	r27, r27
 916:	66 1f       	adc	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	88 1f       	adc	r24, r24
 91c:	c2 f7       	brpl	.-16     	; 0x90e <__stack+0xf>
 91e:	0e c0       	rjmp	.+28     	; 0x93c <__stack+0x3d>
 920:	ba 0f       	add	r27, r26
 922:	62 1f       	adc	r22, r18
 924:	73 1f       	adc	r23, r19
 926:	84 1f       	adc	r24, r20
 928:	48 f4       	brcc	.+18     	; 0x93c <__stack+0x3d>
 92a:	87 95       	ror	r24
 92c:	77 95       	ror	r23
 92e:	67 95       	ror	r22
 930:	b7 95       	ror	r27
 932:	f7 95       	ror	r31
 934:	9e 3f       	cpi	r25, 0xFE	; 254
 936:	08 f0       	brcs	.+2      	; 0x93a <__stack+0x3b>
 938:	b0 cf       	rjmp	.-160    	; 0x89a <__addsf3+0x28>
 93a:	93 95       	inc	r25
 93c:	88 0f       	add	r24, r24
 93e:	08 f0       	brcs	.+2      	; 0x942 <__stack+0x43>
 940:	99 27       	eor	r25, r25
 942:	ee 0f       	add	r30, r30
 944:	97 95       	ror	r25
 946:	87 95       	ror	r24
 948:	08 95       	ret

0000094a <__cmpsf2>:
 94a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_cmp>
 94e:	08 f4       	brcc	.+2      	; 0x952 <__cmpsf2+0x8>
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	08 95       	ret

00000954 <__divsf3>:
 954:	0e 94 be 04 	call	0x97c	; 0x97c <__divsf3x>
 958:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__fp_round>
 95c:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fp_pscB>
 960:	58 f0       	brcs	.+22     	; 0x978 <__divsf3+0x24>
 962:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscA>
 966:	40 f0       	brcs	.+16     	; 0x978 <__divsf3+0x24>
 968:	29 f4       	brne	.+10     	; 0x974 <__divsf3+0x20>
 96a:	5f 3f       	cpi	r21, 0xFF	; 255
 96c:	29 f0       	breq	.+10     	; 0x978 <__divsf3+0x24>
 96e:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_inf>
 972:	51 11       	cpse	r21, r1
 974:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_szero>
 978:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_nan>

0000097c <__divsf3x>:
 97c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fp_split3>
 980:	68 f3       	brcs	.-38     	; 0x95c <__divsf3+0x8>

00000982 <__divsf3_pse>:
 982:	99 23       	and	r25, r25
 984:	b1 f3       	breq	.-20     	; 0x972 <__divsf3+0x1e>
 986:	55 23       	and	r21, r21
 988:	91 f3       	breq	.-28     	; 0x96e <__divsf3+0x1a>
 98a:	95 1b       	sub	r25, r21
 98c:	55 0b       	sbc	r21, r21
 98e:	bb 27       	eor	r27, r27
 990:	aa 27       	eor	r26, r26
 992:	62 17       	cp	r22, r18
 994:	73 07       	cpc	r23, r19
 996:	84 07       	cpc	r24, r20
 998:	38 f0       	brcs	.+14     	; 0x9a8 <__divsf3_pse+0x26>
 99a:	9f 5f       	subi	r25, 0xFF	; 255
 99c:	5f 4f       	sbci	r21, 0xFF	; 255
 99e:	22 0f       	add	r18, r18
 9a0:	33 1f       	adc	r19, r19
 9a2:	44 1f       	adc	r20, r20
 9a4:	aa 1f       	adc	r26, r26
 9a6:	a9 f3       	breq	.-22     	; 0x992 <__divsf3_pse+0x10>
 9a8:	35 d0       	rcall	.+106    	; 0xa14 <__divsf3_pse+0x92>
 9aa:	0e 2e       	mov	r0, r30
 9ac:	3a f0       	brmi	.+14     	; 0x9bc <__divsf3_pse+0x3a>
 9ae:	e0 e8       	ldi	r30, 0x80	; 128
 9b0:	32 d0       	rcall	.+100    	; 0xa16 <__divsf3_pse+0x94>
 9b2:	91 50       	subi	r25, 0x01	; 1
 9b4:	50 40       	sbci	r21, 0x00	; 0
 9b6:	e6 95       	lsr	r30
 9b8:	00 1c       	adc	r0, r0
 9ba:	ca f7       	brpl	.-14     	; 0x9ae <__divsf3_pse+0x2c>
 9bc:	2b d0       	rcall	.+86     	; 0xa14 <__divsf3_pse+0x92>
 9be:	fe 2f       	mov	r31, r30
 9c0:	29 d0       	rcall	.+82     	; 0xa14 <__divsf3_pse+0x92>
 9c2:	66 0f       	add	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	bb 1f       	adc	r27, r27
 9ca:	26 17       	cp	r18, r22
 9cc:	37 07       	cpc	r19, r23
 9ce:	48 07       	cpc	r20, r24
 9d0:	ab 07       	cpc	r26, r27
 9d2:	b0 e8       	ldi	r27, 0x80	; 128
 9d4:	09 f0       	breq	.+2      	; 0x9d8 <__divsf3_pse+0x56>
 9d6:	bb 0b       	sbc	r27, r27
 9d8:	80 2d       	mov	r24, r0
 9da:	bf 01       	movw	r22, r30
 9dc:	ff 27       	eor	r31, r31
 9de:	93 58       	subi	r25, 0x83	; 131
 9e0:	5f 4f       	sbci	r21, 0xFF	; 255
 9e2:	3a f0       	brmi	.+14     	; 0x9f2 <__divsf3_pse+0x70>
 9e4:	9e 3f       	cpi	r25, 0xFE	; 254
 9e6:	51 05       	cpc	r21, r1
 9e8:	78 f0       	brcs	.+30     	; 0xa08 <__divsf3_pse+0x86>
 9ea:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_inf>
 9ee:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_szero>
 9f2:	5f 3f       	cpi	r21, 0xFF	; 255
 9f4:	e4 f3       	brlt	.-8      	; 0x9ee <__divsf3_pse+0x6c>
 9f6:	98 3e       	cpi	r25, 0xE8	; 232
 9f8:	d4 f3       	brlt	.-12     	; 0x9ee <__divsf3_pse+0x6c>
 9fa:	86 95       	lsr	r24
 9fc:	77 95       	ror	r23
 9fe:	67 95       	ror	r22
 a00:	b7 95       	ror	r27
 a02:	f7 95       	ror	r31
 a04:	9f 5f       	subi	r25, 0xFF	; 255
 a06:	c9 f7       	brne	.-14     	; 0x9fa <__divsf3_pse+0x78>
 a08:	88 0f       	add	r24, r24
 a0a:	91 1d       	adc	r25, r1
 a0c:	96 95       	lsr	r25
 a0e:	87 95       	ror	r24
 a10:	97 f9       	bld	r25, 7
 a12:	08 95       	ret
 a14:	e1 e0       	ldi	r30, 0x01	; 1
 a16:	66 0f       	add	r22, r22
 a18:	77 1f       	adc	r23, r23
 a1a:	88 1f       	adc	r24, r24
 a1c:	bb 1f       	adc	r27, r27
 a1e:	62 17       	cp	r22, r18
 a20:	73 07       	cpc	r23, r19
 a22:	84 07       	cpc	r24, r20
 a24:	ba 07       	cpc	r27, r26
 a26:	20 f0       	brcs	.+8      	; 0xa30 <__divsf3_pse+0xae>
 a28:	62 1b       	sub	r22, r18
 a2a:	73 0b       	sbc	r23, r19
 a2c:	84 0b       	sbc	r24, r20
 a2e:	ba 0b       	sbc	r27, r26
 a30:	ee 1f       	adc	r30, r30
 a32:	88 f7       	brcc	.-30     	; 0xa16 <__divsf3_pse+0x94>
 a34:	e0 95       	com	r30
 a36:	08 95       	ret

00000a38 <__fixsfsi>:
 a38:	0e 94 23 05 	call	0xa46	; 0xa46 <__fixunssfsi>
 a3c:	68 94       	set
 a3e:	b1 11       	cpse	r27, r1
 a40:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_szero>
 a44:	08 95       	ret

00000a46 <__fixunssfsi>:
 a46:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__fp_splitA>
 a4a:	88 f0       	brcs	.+34     	; 0xa6e <__fixunssfsi+0x28>
 a4c:	9f 57       	subi	r25, 0x7F	; 127
 a4e:	98 f0       	brcs	.+38     	; 0xa76 <__fixunssfsi+0x30>
 a50:	b9 2f       	mov	r27, r25
 a52:	99 27       	eor	r25, r25
 a54:	b7 51       	subi	r27, 0x17	; 23
 a56:	b0 f0       	brcs	.+44     	; 0xa84 <__fixunssfsi+0x3e>
 a58:	e1 f0       	breq	.+56     	; 0xa92 <__fixunssfsi+0x4c>
 a5a:	66 0f       	add	r22, r22
 a5c:	77 1f       	adc	r23, r23
 a5e:	88 1f       	adc	r24, r24
 a60:	99 1f       	adc	r25, r25
 a62:	1a f0       	brmi	.+6      	; 0xa6a <__fixunssfsi+0x24>
 a64:	ba 95       	dec	r27
 a66:	c9 f7       	brne	.-14     	; 0xa5a <__fixunssfsi+0x14>
 a68:	14 c0       	rjmp	.+40     	; 0xa92 <__fixunssfsi+0x4c>
 a6a:	b1 30       	cpi	r27, 0x01	; 1
 a6c:	91 f0       	breq	.+36     	; 0xa92 <__fixunssfsi+0x4c>
 a6e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fp_zero>
 a72:	b1 e0       	ldi	r27, 0x01	; 1
 a74:	08 95       	ret
 a76:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__fp_zero>
 a7a:	67 2f       	mov	r22, r23
 a7c:	78 2f       	mov	r23, r24
 a7e:	88 27       	eor	r24, r24
 a80:	b8 5f       	subi	r27, 0xF8	; 248
 a82:	39 f0       	breq	.+14     	; 0xa92 <__fixunssfsi+0x4c>
 a84:	b9 3f       	cpi	r27, 0xF9	; 249
 a86:	cc f3       	brlt	.-14     	; 0xa7a <__fixunssfsi+0x34>
 a88:	86 95       	lsr	r24
 a8a:	77 95       	ror	r23
 a8c:	67 95       	ror	r22
 a8e:	b3 95       	inc	r27
 a90:	d9 f7       	brne	.-10     	; 0xa88 <__fixunssfsi+0x42>
 a92:	3e f4       	brtc	.+14     	; 0xaa2 <__fixunssfsi+0x5c>
 a94:	90 95       	com	r25
 a96:	80 95       	com	r24
 a98:	70 95       	com	r23
 a9a:	61 95       	neg	r22
 a9c:	7f 4f       	sbci	r23, 0xFF	; 255
 a9e:	8f 4f       	sbci	r24, 0xFF	; 255
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	08 95       	ret

00000aa4 <__floatunsisf>:
 aa4:	e8 94       	clt
 aa6:	09 c0       	rjmp	.+18     	; 0xaba <__floatsisf+0x12>

00000aa8 <__floatsisf>:
 aa8:	97 fb       	bst	r25, 7
 aaa:	3e f4       	brtc	.+14     	; 0xaba <__floatsisf+0x12>
 aac:	90 95       	com	r25
 aae:	80 95       	com	r24
 ab0:	70 95       	com	r23
 ab2:	61 95       	neg	r22
 ab4:	7f 4f       	sbci	r23, 0xFF	; 255
 ab6:	8f 4f       	sbci	r24, 0xFF	; 255
 ab8:	9f 4f       	sbci	r25, 0xFF	; 255
 aba:	99 23       	and	r25, r25
 abc:	a9 f0       	breq	.+42     	; 0xae8 <__floatsisf+0x40>
 abe:	f9 2f       	mov	r31, r25
 ac0:	96 e9       	ldi	r25, 0x96	; 150
 ac2:	bb 27       	eor	r27, r27
 ac4:	93 95       	inc	r25
 ac6:	f6 95       	lsr	r31
 ac8:	87 95       	ror	r24
 aca:	77 95       	ror	r23
 acc:	67 95       	ror	r22
 ace:	b7 95       	ror	r27
 ad0:	f1 11       	cpse	r31, r1
 ad2:	f8 cf       	rjmp	.-16     	; 0xac4 <__floatsisf+0x1c>
 ad4:	fa f4       	brpl	.+62     	; 0xb14 <__floatsisf+0x6c>
 ad6:	bb 0f       	add	r27, r27
 ad8:	11 f4       	brne	.+4      	; 0xade <__floatsisf+0x36>
 ada:	60 ff       	sbrs	r22, 0
 adc:	1b c0       	rjmp	.+54     	; 0xb14 <__floatsisf+0x6c>
 ade:	6f 5f       	subi	r22, 0xFF	; 255
 ae0:	7f 4f       	sbci	r23, 0xFF	; 255
 ae2:	8f 4f       	sbci	r24, 0xFF	; 255
 ae4:	9f 4f       	sbci	r25, 0xFF	; 255
 ae6:	16 c0       	rjmp	.+44     	; 0xb14 <__floatsisf+0x6c>
 ae8:	88 23       	and	r24, r24
 aea:	11 f0       	breq	.+4      	; 0xaf0 <__floatsisf+0x48>
 aec:	96 e9       	ldi	r25, 0x96	; 150
 aee:	11 c0       	rjmp	.+34     	; 0xb12 <__floatsisf+0x6a>
 af0:	77 23       	and	r23, r23
 af2:	21 f0       	breq	.+8      	; 0xafc <__floatsisf+0x54>
 af4:	9e e8       	ldi	r25, 0x8E	; 142
 af6:	87 2f       	mov	r24, r23
 af8:	76 2f       	mov	r23, r22
 afa:	05 c0       	rjmp	.+10     	; 0xb06 <__floatsisf+0x5e>
 afc:	66 23       	and	r22, r22
 afe:	71 f0       	breq	.+28     	; 0xb1c <__floatsisf+0x74>
 b00:	96 e8       	ldi	r25, 0x86	; 134
 b02:	86 2f       	mov	r24, r22
 b04:	70 e0       	ldi	r23, 0x00	; 0
 b06:	60 e0       	ldi	r22, 0x00	; 0
 b08:	2a f0       	brmi	.+10     	; 0xb14 <__floatsisf+0x6c>
 b0a:	9a 95       	dec	r25
 b0c:	66 0f       	add	r22, r22
 b0e:	77 1f       	adc	r23, r23
 b10:	88 1f       	adc	r24, r24
 b12:	da f7       	brpl	.-10     	; 0xb0a <__floatsisf+0x62>
 b14:	88 0f       	add	r24, r24
 b16:	96 95       	lsr	r25
 b18:	87 95       	ror	r24
 b1a:	97 f9       	bld	r25, 7
 b1c:	08 95       	ret

00000b1e <__fp_cmp>:
 b1e:	99 0f       	add	r25, r25
 b20:	00 08       	sbc	r0, r0
 b22:	55 0f       	add	r21, r21
 b24:	aa 0b       	sbc	r26, r26
 b26:	e0 e8       	ldi	r30, 0x80	; 128
 b28:	fe ef       	ldi	r31, 0xFE	; 254
 b2a:	16 16       	cp	r1, r22
 b2c:	17 06       	cpc	r1, r23
 b2e:	e8 07       	cpc	r30, r24
 b30:	f9 07       	cpc	r31, r25
 b32:	c0 f0       	brcs	.+48     	; 0xb64 <__fp_cmp+0x46>
 b34:	12 16       	cp	r1, r18
 b36:	13 06       	cpc	r1, r19
 b38:	e4 07       	cpc	r30, r20
 b3a:	f5 07       	cpc	r31, r21
 b3c:	98 f0       	brcs	.+38     	; 0xb64 <__fp_cmp+0x46>
 b3e:	62 1b       	sub	r22, r18
 b40:	73 0b       	sbc	r23, r19
 b42:	84 0b       	sbc	r24, r20
 b44:	95 0b       	sbc	r25, r21
 b46:	39 f4       	brne	.+14     	; 0xb56 <__fp_cmp+0x38>
 b48:	0a 26       	eor	r0, r26
 b4a:	61 f0       	breq	.+24     	; 0xb64 <__fp_cmp+0x46>
 b4c:	23 2b       	or	r18, r19
 b4e:	24 2b       	or	r18, r20
 b50:	25 2b       	or	r18, r21
 b52:	21 f4       	brne	.+8      	; 0xb5c <__fp_cmp+0x3e>
 b54:	08 95       	ret
 b56:	0a 26       	eor	r0, r26
 b58:	09 f4       	brne	.+2      	; 0xb5c <__fp_cmp+0x3e>
 b5a:	a1 40       	sbci	r26, 0x01	; 1
 b5c:	a6 95       	lsr	r26
 b5e:	8f ef       	ldi	r24, 0xFF	; 255
 b60:	81 1d       	adc	r24, r1
 b62:	81 1d       	adc	r24, r1
 b64:	08 95       	ret

00000b66 <__fp_inf>:
 b66:	97 f9       	bld	r25, 7
 b68:	9f 67       	ori	r25, 0x7F	; 127
 b6a:	80 e8       	ldi	r24, 0x80	; 128
 b6c:	70 e0       	ldi	r23, 0x00	; 0
 b6e:	60 e0       	ldi	r22, 0x00	; 0
 b70:	08 95       	ret

00000b72 <__fp_nan>:
 b72:	9f ef       	ldi	r25, 0xFF	; 255
 b74:	80 ec       	ldi	r24, 0xC0	; 192
 b76:	08 95       	ret

00000b78 <__fp_pscA>:
 b78:	00 24       	eor	r0, r0
 b7a:	0a 94       	dec	r0
 b7c:	16 16       	cp	r1, r22
 b7e:	17 06       	cpc	r1, r23
 b80:	18 06       	cpc	r1, r24
 b82:	09 06       	cpc	r0, r25
 b84:	08 95       	ret

00000b86 <__fp_pscB>:
 b86:	00 24       	eor	r0, r0
 b88:	0a 94       	dec	r0
 b8a:	12 16       	cp	r1, r18
 b8c:	13 06       	cpc	r1, r19
 b8e:	14 06       	cpc	r1, r20
 b90:	05 06       	cpc	r0, r21
 b92:	08 95       	ret

00000b94 <__fp_round>:
 b94:	09 2e       	mov	r0, r25
 b96:	03 94       	inc	r0
 b98:	00 0c       	add	r0, r0
 b9a:	11 f4       	brne	.+4      	; 0xba0 <__fp_round+0xc>
 b9c:	88 23       	and	r24, r24
 b9e:	52 f0       	brmi	.+20     	; 0xbb4 <__fp_round+0x20>
 ba0:	bb 0f       	add	r27, r27
 ba2:	40 f4       	brcc	.+16     	; 0xbb4 <__fp_round+0x20>
 ba4:	bf 2b       	or	r27, r31
 ba6:	11 f4       	brne	.+4      	; 0xbac <__fp_round+0x18>
 ba8:	60 ff       	sbrs	r22, 0
 baa:	04 c0       	rjmp	.+8      	; 0xbb4 <__fp_round+0x20>
 bac:	6f 5f       	subi	r22, 0xFF	; 255
 bae:	7f 4f       	sbci	r23, 0xFF	; 255
 bb0:	8f 4f       	sbci	r24, 0xFF	; 255
 bb2:	9f 4f       	sbci	r25, 0xFF	; 255
 bb4:	08 95       	ret

00000bb6 <__fp_split3>:
 bb6:	57 fd       	sbrc	r21, 7
 bb8:	90 58       	subi	r25, 0x80	; 128
 bba:	44 0f       	add	r20, r20
 bbc:	55 1f       	adc	r21, r21
 bbe:	59 f0       	breq	.+22     	; 0xbd6 <__fp_splitA+0x10>
 bc0:	5f 3f       	cpi	r21, 0xFF	; 255
 bc2:	71 f0       	breq	.+28     	; 0xbe0 <__fp_splitA+0x1a>
 bc4:	47 95       	ror	r20

00000bc6 <__fp_splitA>:
 bc6:	88 0f       	add	r24, r24
 bc8:	97 fb       	bst	r25, 7
 bca:	99 1f       	adc	r25, r25
 bcc:	61 f0       	breq	.+24     	; 0xbe6 <__fp_splitA+0x20>
 bce:	9f 3f       	cpi	r25, 0xFF	; 255
 bd0:	79 f0       	breq	.+30     	; 0xbf0 <__fp_splitA+0x2a>
 bd2:	87 95       	ror	r24
 bd4:	08 95       	ret
 bd6:	12 16       	cp	r1, r18
 bd8:	13 06       	cpc	r1, r19
 bda:	14 06       	cpc	r1, r20
 bdc:	55 1f       	adc	r21, r21
 bde:	f2 cf       	rjmp	.-28     	; 0xbc4 <__fp_split3+0xe>
 be0:	46 95       	lsr	r20
 be2:	f1 df       	rcall	.-30     	; 0xbc6 <__fp_splitA>
 be4:	08 c0       	rjmp	.+16     	; 0xbf6 <__fp_splitA+0x30>
 be6:	16 16       	cp	r1, r22
 be8:	17 06       	cpc	r1, r23
 bea:	18 06       	cpc	r1, r24
 bec:	99 1f       	adc	r25, r25
 bee:	f1 cf       	rjmp	.-30     	; 0xbd2 <__fp_splitA+0xc>
 bf0:	86 95       	lsr	r24
 bf2:	71 05       	cpc	r23, r1
 bf4:	61 05       	cpc	r22, r1
 bf6:	08 94       	sec
 bf8:	08 95       	ret

00000bfa <__fp_zero>:
 bfa:	e8 94       	clt

00000bfc <__fp_szero>:
 bfc:	bb 27       	eor	r27, r27
 bfe:	66 27       	eor	r22, r22
 c00:	77 27       	eor	r23, r23
 c02:	cb 01       	movw	r24, r22
 c04:	97 f9       	bld	r25, 7
 c06:	08 95       	ret

00000c08 <__gesf2>:
 c08:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_cmp>
 c0c:	08 f4       	brcc	.+2      	; 0xc10 <__gesf2+0x8>
 c0e:	8f ef       	ldi	r24, 0xFF	; 255
 c10:	08 95       	ret

00000c12 <__mulsf3>:
 c12:	0e 94 1c 06 	call	0xc38	; 0xc38 <__mulsf3x>
 c16:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__fp_round>
 c1a:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_pscA>
 c1e:	38 f0       	brcs	.+14     	; 0xc2e <__mulsf3+0x1c>
 c20:	0e 94 c3 05 	call	0xb86	; 0xb86 <__fp_pscB>
 c24:	20 f0       	brcs	.+8      	; 0xc2e <__mulsf3+0x1c>
 c26:	95 23       	and	r25, r21
 c28:	11 f0       	breq	.+4      	; 0xc2e <__mulsf3+0x1c>
 c2a:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_inf>
 c2e:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_nan>
 c32:	11 24       	eor	r1, r1
 c34:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_szero>

00000c38 <__mulsf3x>:
 c38:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fp_split3>
 c3c:	70 f3       	brcs	.-36     	; 0xc1a <__mulsf3+0x8>

00000c3e <__mulsf3_pse>:
 c3e:	95 9f       	mul	r25, r21
 c40:	c1 f3       	breq	.-16     	; 0xc32 <__mulsf3+0x20>
 c42:	95 0f       	add	r25, r21
 c44:	50 e0       	ldi	r21, 0x00	; 0
 c46:	55 1f       	adc	r21, r21
 c48:	62 9f       	mul	r22, r18
 c4a:	f0 01       	movw	r30, r0
 c4c:	72 9f       	mul	r23, r18
 c4e:	bb 27       	eor	r27, r27
 c50:	f0 0d       	add	r31, r0
 c52:	b1 1d       	adc	r27, r1
 c54:	63 9f       	mul	r22, r19
 c56:	aa 27       	eor	r26, r26
 c58:	f0 0d       	add	r31, r0
 c5a:	b1 1d       	adc	r27, r1
 c5c:	aa 1f       	adc	r26, r26
 c5e:	64 9f       	mul	r22, r20
 c60:	66 27       	eor	r22, r22
 c62:	b0 0d       	add	r27, r0
 c64:	a1 1d       	adc	r26, r1
 c66:	66 1f       	adc	r22, r22
 c68:	82 9f       	mul	r24, r18
 c6a:	22 27       	eor	r18, r18
 c6c:	b0 0d       	add	r27, r0
 c6e:	a1 1d       	adc	r26, r1
 c70:	62 1f       	adc	r22, r18
 c72:	73 9f       	mul	r23, r19
 c74:	b0 0d       	add	r27, r0
 c76:	a1 1d       	adc	r26, r1
 c78:	62 1f       	adc	r22, r18
 c7a:	83 9f       	mul	r24, r19
 c7c:	a0 0d       	add	r26, r0
 c7e:	61 1d       	adc	r22, r1
 c80:	22 1f       	adc	r18, r18
 c82:	74 9f       	mul	r23, r20
 c84:	33 27       	eor	r19, r19
 c86:	a0 0d       	add	r26, r0
 c88:	61 1d       	adc	r22, r1
 c8a:	23 1f       	adc	r18, r19
 c8c:	84 9f       	mul	r24, r20
 c8e:	60 0d       	add	r22, r0
 c90:	21 1d       	adc	r18, r1
 c92:	82 2f       	mov	r24, r18
 c94:	76 2f       	mov	r23, r22
 c96:	6a 2f       	mov	r22, r26
 c98:	11 24       	eor	r1, r1
 c9a:	9f 57       	subi	r25, 0x7F	; 127
 c9c:	50 40       	sbci	r21, 0x00	; 0
 c9e:	9a f0       	brmi	.+38     	; 0xcc6 <__mulsf3_pse+0x88>
 ca0:	f1 f0       	breq	.+60     	; 0xcde <__mulsf3_pse+0xa0>
 ca2:	88 23       	and	r24, r24
 ca4:	4a f0       	brmi	.+18     	; 0xcb8 <__mulsf3_pse+0x7a>
 ca6:	ee 0f       	add	r30, r30
 ca8:	ff 1f       	adc	r31, r31
 caa:	bb 1f       	adc	r27, r27
 cac:	66 1f       	adc	r22, r22
 cae:	77 1f       	adc	r23, r23
 cb0:	88 1f       	adc	r24, r24
 cb2:	91 50       	subi	r25, 0x01	; 1
 cb4:	50 40       	sbci	r21, 0x00	; 0
 cb6:	a9 f7       	brne	.-22     	; 0xca2 <__mulsf3_pse+0x64>
 cb8:	9e 3f       	cpi	r25, 0xFE	; 254
 cba:	51 05       	cpc	r21, r1
 cbc:	80 f0       	brcs	.+32     	; 0xcde <__mulsf3_pse+0xa0>
 cbe:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_inf>
 cc2:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__fp_szero>
 cc6:	5f 3f       	cpi	r21, 0xFF	; 255
 cc8:	e4 f3       	brlt	.-8      	; 0xcc2 <__mulsf3_pse+0x84>
 cca:	98 3e       	cpi	r25, 0xE8	; 232
 ccc:	d4 f3       	brlt	.-12     	; 0xcc2 <__mulsf3_pse+0x84>
 cce:	86 95       	lsr	r24
 cd0:	77 95       	ror	r23
 cd2:	67 95       	ror	r22
 cd4:	b7 95       	ror	r27
 cd6:	f7 95       	ror	r31
 cd8:	e7 95       	ror	r30
 cda:	9f 5f       	subi	r25, 0xFF	; 255
 cdc:	c1 f7       	brne	.-16     	; 0xcce <__mulsf3_pse+0x90>
 cde:	fe 2b       	or	r31, r30
 ce0:	88 0f       	add	r24, r24
 ce2:	91 1d       	adc	r25, r1
 ce4:	96 95       	lsr	r25
 ce6:	87 95       	ror	r24
 ce8:	97 f9       	bld	r25, 7
 cea:	08 95       	ret

00000cec <_exit>:
 cec:	f8 94       	cli

00000cee <__stop_program>:
 cee:	ff cf       	rjmp	.-2      	; 0xcee <__stop_program>
